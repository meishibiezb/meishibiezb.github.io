import{_ as r,c as t,o as e,ag as o}from"./chunks/framework.GIpVouxN.js";const p=JSON.parse('{"title":"开始","description":"","frontmatter":{"title":"开始"},"headers":[],"relativePath":"start.md","filePath":"start.md","lastUpdated":1756999899000}'),s={name:"start.md"};function i(n,a,l,h,d,b){return e(),t("div",null,[...a[0]||(a[0]=[o('<h1 id="为什么要写这篇文章" tabindex="-1">为什么要写这篇文章 <a class="header-anchor" href="#为什么要写这篇文章" aria-label="Permalink to &quot;为什么要写这篇文章&quot;">​</a></h1><p>    我发现身边有许多同学在学习计算机方面有困难，入坑计算机一年了，还不能称得上摸到计算机的门槛。 然而我认为，计算机虽然是一门博大精深的学科，但计算机毕竟不是魔法，并非是常人难以学会的。 这些同学可能只是没有摸索出学习计算机的正确方法。 然而不知道怎么高效地学习计算机，这是很正常的。 因为学习计算机的思维方式和我们中学以来所习惯的应试教育的思维方式有很大不同。 要学好计算机，关键之处在于改变学习时的思维方式。 不过要注意的是，每个人所处的条件都是不同的，也各自适合不同的学习方式。 关键在于找到最适合自己的学习方式，照搬别人的的经验很可能不能使你的学习效率提高，反而会浪费许多精力，徒增痛苦。 我在大学里学习计算机也有一年了。 在这期间我也逐渐摸索出了一些学习计算机的经验。 我现在会试着将这些经验总结出来，希望能够对你们有所启发，为后来者在计算机专业的求学之路上尽量地扫除一些障碍。 然而即便有了各种优秀资源和科学高效的学习方法，困难仍然是不可避免的，并且充斥着学习过程中的各个方面。 这是正常现象，困难是可以克服的。 所以说，在尝试中开始吧。</p><h3 id="关于自学" tabindex="-1">关于自学 <a class="header-anchor" href="#关于自学" aria-label="Permalink to &quot;关于自学&quot;">​</a></h3><p>    在大学里学习了一年计算机之后，我发现我获得的绝大部分的知识都来源于自学。 因为计算机是一门比较讲究实践和时效性的学科。 而如果仅仅只是跟着学校的课程学习，你很难培养应有的能力。 因为你很可能一年也写不了几行代码，上课用的也基本上是十几年前的课件。 有些人可能发现自己很难在课堂上跟着老师的思路走，相反，自学时会感到比较自在，比如说我。 可以说，在我心目当中，自学才是学习计算机的“正道”。 如果你和我一样也是一个自学爱好者，可以参考这篇<a href="https://csdiy.wiki/" target="_blank" rel="noreferrer">CS自学指南</a>。</p><h3 id="你能从这篇文章中获得什么" tabindex="-1">你能从这篇文章中获得什么 <a class="header-anchor" href="#你能从这篇文章中获得什么" aria-label="Permalink to &quot;你能从这篇文章中获得什么&quot;">​</a></h3><p>    我会在这篇文章中说明我对学习计算机的理解。 包括了计算机专业的核心素养、学习方法和我收集到的一些资源，还会有一些生活小妙招。</p><div class="tip custom-block"><p class="custom-block-title">网站开发中</p><p>本网站尚处于开发阶段，有不完善的地方敬请谅解。 如果你也有一些资源想要分享，可以参见“关于”部分的“反馈与贡献”。</p></div><hr><h1 id="如何使用本文" tabindex="-1">如何使用本文 <a class="header-anchor" href="#如何使用本文" aria-label="Permalink to &quot;如何使用本文&quot;">​</a></h1><h3 id="构建你的认知体系" tabindex="-1">构建你的认知体系 <a class="header-anchor" href="#构建你的认知体系" aria-label="Permalink to &quot;构建你的认知体系&quot;">​</a></h3><p>    市面上有许多教程资源，b站上就能找到一大堆计算机相关的教程视频，涉及求学、就业等各个方面。 做教程的人当然也很多。 但是我并不想把这篇文章写成一篇“教程”。 这篇文章并非意图教读者一些“点对点”的技巧和具体细节。 相反，我更希望这篇文章的价值是在一些方面带给你们启发，成为你们思想熔炉的燃料，让你们更好的探索“怎么学习”这个问题的答案。<br>     选择了入坑计算机，就代表了你们选择了终身学习、持续学习。 这是由计算机专业，或者说行业，本身的性质决定的。 往大了说，这是由整个时代背景决定的。 这个快速迭代的时代需要高明的学习者。 因此，重新审视你的学习方法，是十分有意义的。<br>     而关于学习方式这一块，我想说的是，仅仅知道某项技术如何使用、某种工具如何操作这种“点对点”（即一个知识解决一个问题）的知识，是远远不够的。 因为仅仅满足于这些表面的知识，只能解决一时之需，对于你的长期发展则没什么帮助。 更好的做法是找出技术背后的原理、工具中蕴含的设计理念。 或者说，我们不要孤立、片面、静止地看问题，而要联系、全面、发展地看问题。<br>     对于一个事物，我们基本上可以提出三个问题：是什么、为什么和怎么做。 其中，是什么和为什么这两个问题比较重要，而怎么做这个问题的重要性相比于前两者并不那么显著。 我认为，在是什么和为什么这两个问题中，为什么这个问题要更重要。 因为它描述了这个问题与其他知识的联系。 这也是为什么许多学科都强调学习学科发展史的重要性。（很遗憾，计算机科学的发展史比较曲折） 通过不断地问为什么，我们可以把一个一个的知识点连起来，点连成线、线连成面，进而构建出一个知识图谱，更进一步地说，构建出自己的世界观。<br>     不必觉得不断地问为什么、对于一个知识刨根问底是麻烦的、非必要或是一种钻牛角尖的行为。 从长期来看，这么做其实避免了我们重复地问相同的问题，或者说，减少了我们问为什么的次数，提高了我们的学习效率。 将一个知识“连根拔起”，这对于学习者来说是很有益的。 你不仅仅是学习了这个知识点本身，而且学习和它相关的一系列知识点，以及它们之间的关系、组织形式。 你会形成一种感觉，对于各种问题都有了新的角度新的看法，也可能会找到一种解决问题的有效经验，或者说范式。 当你下次遇到其他问题，或者说要学习其他问题的时候，可以复用以往的经验。 久而久之，你会发现自己变“聪明”了，眼界更加开阔，看问题的角度也更加全面。</p><h3 id="如何使用本站" tabindex="-1">如何使用本站 <a class="header-anchor" href="#如何使用本站" aria-label="Permalink to &quot;如何使用本站&quot;">​</a></h3><p>    本站使用<a href="https://vitepress.dev/zh/" target="_blank" rel="noreferrer">VitePress</a>构建。 由于采用了响应式设计，手机、平板和电脑端的页面布局都不一样，但是基本的元素都是具备的。<br>     <strong>导航栏</strong>部分有着主页和正文的链接，你可以通过点击在两个页面切换。 还有作者博客的链接，点击可以查看作者的博客。 导航栏中还有搜索功能，采用minisearch引擎，可以搜索本站的一些内容。 此外还有两个社交链接，你可以看到b站的图标和GitHub的图标。 点击b站的图标可以跳转到作者的b站主页（WIP）。 点击GitHub的图标则可以跳转到本站的GitHub仓库。 还有一个外观切换按钮，点击可以切换网站主题（黑/白）。<br>     <strong>侧边栏</strong>部分位于左侧。 这里是文章的目录，点击不同的标题可以跳转到对应页面。<br>     <strong>大纲</strong>部分位于右侧。 在这里你可以看到当前页面的主要内容。 点击不同的标题可以跳转到对应位置。<br>     点击最下面的按钮可以跳转到下一页（或者前一页）。</p><hr><h1 id="导览" tabindex="-1">导览 <a class="header-anchor" href="#导览" aria-label="Permalink to &quot;导览&quot;">​</a></h1><p>    本文大致分为三个部分。分别是<strong>核心素养</strong>、<strong>学习路径</strong>和<strong>学习资源</strong>。 你可以在目录（侧边栏）里看到这三个部分并且在不同页面之间切换。<br>     核心素养部分阐述了一些我认为对于计算机专业的学生来说非常重要的品质。 也是本文的重点部分。 可以说，对我来说，学习计算机的过程就是围绕着培养这些品质开展的。<br>     学习路径部分给出了我比较推荐的一份学习路径。 可以说搞清楚学习路径是对于计算机初学者来说最头疼的一个问题。 许多前辈也各自给出了对于这个问题的自己的答案。 我这里给出的学习路径也只是其中之一。 不一定适合所有人，仅供参考，但还是希望能对你有所启发。<br>     学习资源部分又包括了一些子模块。 分类归纳了我总结的一些找资源的方法和收集到的资源。 如果你也想分享你的资源，那么可以在目录中找到关于部分，在那里你可以找到为本文做出贡献的方法。</p>',16)])])}const u=r(s,[["render",i]]);export{p as __pageData,u as default};
